name: Build TicketManager with Github Actions
on: 
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - master
      - main
      
env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  
  
jobs:
  Build-TicketManager:
    runs-on: self-hosted
    outputs:
      PP1_STATUS: ${{ env.PP1_STATUS }}
      PP2_STATUS: ${{ env.PP2_STATUS }}
    steps:
      - name: Publish reminder
        uses: actions/github-script@v4.0.2
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Reminder: Wait until Github Actions has finished running the build before merging this PR!'
            })
                    
    
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          ls -la ${{ github.workspace }}
     
     
      - name: Setup JDK 17
        uses: actions/setup-java@v3.4.0
        with:
          distribution: 'zulu'
          java-version: '17'

      
      - name: Build TicketManager with Maven
        run: |
          cd TicketManager && mvn --batch-mode --update-snapshots clean test pmd:pmd spotbugs:spotbugs checkstyle:checkstyle -Dmaven.test.failure.ignore=true > student_build.txt 2>&1
          echo "BUILD_STATUS=$?" >> $GITHUB_ENV
          echo "INSUFFICIENT_TESTS=0" >> $GITHUB_ENV
          
      - name: Make sure all student tests passed
        if: always()
        run: |
          cd TicketManager
          error=$(cat student_build.txt | grep "ERROR" | wc -l)
          failure=$(cat student_build.txt | grep "FAILURE" | wc -l)
          c_error=$(cat student_build.txt | grep "COMPILATION ERROR" | wc -l)
          if [ $c_error -gt 0 ]; then
            echo "$(tput -T linux setaf 1)Your code failed to compile!  Check the log below for details$(tput -T linux sgr 0)"
            cat student_build.txt
            rm -rf student_build.txt
            echo "INSUFFICIENT_TESTS=1" >> $GITHUB_ENV
            exit 300
          elif [ $failure -gt 0 ] || [ $error -gt 0 ]; then
            echo "$(tput -T linux setaf 1)Found failing tests -- click on the \"Student Test Results\" link on the left side for details$(tput -T linux sgr 0)"
            rm -rf student_build.txt
            exit 127
          else
            echo "$(tput -T linux setaf 2)All of your tests passed$(tput -T linux sgr 0)"
            rm -rf student_build.txt
          fi
          
      - name: Publish Test Report
        if: ${{ always() }}
        uses: ScaCap/action-surefire-report@v1.2.0
        with:
          check_name: Student Test Results
 
      - name: Generate coverage badges & check coverage across the entire project
        if: always()
        id: jacoco
        run: > 
            python3 .github/generate_badge.py "TicketManager/target/site/jacoco-ut/jacoco.csv"
            ".github/badges" "jacoco.svg" "branches.svg" "true" "true"
            "fail" "80" "0" "false" "false" "100 90 80 70 60 0" "#4c1 #97ca00 #a4a61d #dfb317 #fe7d37 #e05d44" "true"
            
            
      - name: Log coverage percentage
        if: always()
        run: |
          line=$(bc <<< 'scale=2; 100 * ${{ steps.jacoco.outputs.coverage }} / 1')
          branch=$(bc <<< 'scale=2; 100 * ${{ steps.jacoco.outputs.branches }} / 1')
          echo "line coverage = $line percent"
          echo "branch coverage = $branch percent"
          
      - name: Check coverage across all classes & make sure there are no JUnit-related PMD alerts
        if: always()
        run: |
          chmod +x .github/testingChecker.sh
          cd .github
          ./testingChecker.sh
          echo "INSUFFICIENT_TESTS=$?" >> $GITHUB_ENV
        shell: bash
          
      
        
      - name: Add coverage to PR
        id: publishJacoco
        if: ${{ always() }}
        uses: Madrapps/jacoco-report@v1.2
        with:
          paths: ${{ github.workspace }}/TicketManager/target/site/jacoco-ut/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 80
          min-coverage-changed-files: 80          
          
      - name: Publish SpotBugs Report
        if: always()
        uses: kpresler/spotbugs-github-action@master
        with:
          path: '**/spotbugsXml.xml'
        
      - name: Clean up PMD report to display just JUnit warnings
        if: always()
        run: |
          python3 .github/pmd_subset.py 
          
      - name: Publish PMD Report
        if: always() 
        uses: kpresler/pmd-github-action@master
        with:
          path: '**/pmd.xml'
          name: All PMD Warnings
          
      - name: Publish High-Priority JUnit PMD Report
        if: always() 
        uses: kpresler/pmd-github-action@master
        with:
          path: '**/junit_alerts.xml'
          name: High-Priority JUnit PMD Warnings
          
      - name: Publish CheckStyle Report
        if: always()
        uses: kpresler/checkstyle-github-action@master
        with:
          path: '**/checkstyle-result.xml'
          
      - name: Clear `.class` files to prepare running TS tests
        if: always()
        run: |
          find . -name "*Test*.class" -type f -delete
          rm -rf TicketManager/target/surefire-reports/*
          
      - name: Fetch hidden TS tests
        if: always()
        shell: bash
        env:
          TSPW: ${{ secrets.TILDESITEFILEPASSWORD }}
        run: |
          export URL="https://tildesites.bowdoin.edu/~k.preslermarshall/download.php?file=2335_Project1_Tests.tar.gz&pw=$TSPW"
          wget -O Project1_Tests.tar.gz "$URL"
          
      - name: Extract & clean up tests
        shell: bash
        if: always()
        run: |
          tar -xvzf  Project1_Tests.tar.gz -C TicketManager/target/test-classes/
          rm -rf Project1_Tests.tar.gz
          chmod +x .github/check_files.sh
          .github/check_files.sh



      - name: Make sure project skeleton compiles
        if: always()
        id: pp1
        run: |
          cd TicketManager && mvn --batch-mode surefire:test > out.txt 2>&1 || true
          compilationFailed=$(cat out.txt | grep -E "Unresolved compilation problem|NoSuchMethodError|NoClassDefFound" | wc -l)
          if [ $compilationFailed -gt 0 ]
          then
            echo "$(tput -T linux setaf 1)Warning!  Your project skeleton failed to compile against the Teaching Staff testcases.  Check the log below & the UML diagram to figure out what :$(tput -T linux sgr 0)" 
            echo "" > compilationReport.txt
            for compilationProblem in $(cat out.txt | grep -n -E "Unresolved compilation problem|NoSuchMethodError|NoClassDefFound") 
            do
              #echo $compilationProblem
              lineNumber=$(echo $compilationProblem | awk -F ':' '{print $1}')
              re='^[0-9]+$'
              if ! [[ $lineNumber =~ $re ]] ; then
                continue
              fi
              if [[ $compilationProblem = Error* ]] ; then
                continue
              fi
              endLineNumber=$(($lineNumber + 5))
              sedExpr="$lineNumber,$endLineNumber p"
              #echo $sedExpr
              sed -n "$sedExpr" out.txt >> compilationReport.txt
            done

            cat compilationReport.txt
            #echo "\n\n\n\n\n\n\n\n\n\n\n\n\n"
            #echo "Full results"
            #cat out.txt
            rm -rf out.txt && rm -rf compilationReport.txt
            echo "PP1_STATUS=failure" >> $GITHUB_ENV
            exit 127
          elif [ ${{ env.MISSING_FILES }} = true ]
          then
            echo "$(tput -T linux setaf 1)Warning!  Your project skeleton compiled against the Teaching Staff testcases, but not all expected source files were found.  Check the UML diagram to find out which classe(s) were missing$(tput -T linux sgr 0)"
            rm -rf out.txt
            echo "PP1_STATUS=failure" >> $GITHUB_ENV
            exit 128
          else
            echo "$(tput -T linux setaf 2)Your project is complete & compiled against the Teaching Staff testcases!$(tput -T linux sgr 0)"
            echo "PP1_STATUS=success" >> $GITHUB_ENV
            rm -rf out.txt
          fi
          
      - name: Check coverage across individual source files to prepare running TS_Tests
        if: always()
        run: |
          cd .github && chmod +x checkCoverage.sh && ./checkCoverage.sh
          
      - name: Run all Teaching Staff testcases
        if: always()
        run: |
          if [[ ${{ env.INSUFFICIENT_TESTS }} -eq 0 ]]; then
            cd TicketManager && mvn --batch-mode surefire:test
          else
            echo "$(tput -T linux setaf 1)Your tests contain 1 or more JUnit-related PMD alerts or their is insufficient coverage.  TS tests will not be run$(tput -T linux sgr 0)"
            exit 37
          fi

      - name: Process Points 2 Milestone Check
        if: always()
        run: |
          chmod +x .github/pp2.sh
          .github/pp2.sh
          
 
      - name: Publish TS_Test Report
        if: ${{ always() }}
        uses: ScaCap/action-surefire-report@v1.2.0
        with:
          check_name: Teaching Staff Test Results

      - name: Clean up temporary files
        if: always()
        run: |
          cd TicketManager && mvn clean
          
          
      - name: Commit the code coverage badge (if it changed)
        if: always()
        run: |
          DETATCHED_HEAD_FOUND=$(git status | grep 'HEAD detached' | wc -l)
          if [[ `git status --porcelain` && $DETATCHED_HEAD_FOUND -eq 0 ]]; then
            git config --global user.name 'Github Actions Service Account'
            git config --global user.email 'bowdoin-csci-gh-actions@gmail.com'
            git add -A
            git commit -m "Autogenerated JaCoCo coverage badge"
            git push
          fi

      - name: Make sure all tests were run
        if: always()
        run: |
          if [ ${{ env.MISSING_FILES }} = true ] ; then
              echo "$(tput -T linux setaf 1)One or more of the expected source files were not found.  Your project is probably not complete!$(tput -T linux sgr 0)"
              exit 1
          elif [ ${{ env.INCOMPLETE_COVERAGE }} = true ] ; then
              echo "$(tput -T linux setaf 1) One or more of your source files does not meet the expected coverage mark (80%).  Your project has not been sufficiently tested to unlock all teaching staff tests$(tput -T linux sgr 0)"
          fi

  Report-A:
    runs-on: self-hosted
    needs: Build-TicketManager
    if: always()
    steps:
      - name: Publish Process Points 1 Check
        uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Process Points 1 Milestone
          conclusion: ${{ needs.Build-TicketManager.outputs.PP1_STATUS }}
          output: |
            {"summary":"This indicates whether your project has successfully passed the Process Points 1 Milestone"}
            
  Report-B:
    runs-on: self-hosted
    needs: Build-TicketManager
    if: always()
    steps:
      - name: Publish Process Points 2 Check
        uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Process Points 2 Milestone
          conclusion: ${{ needs.Build-TicketManager.outputs.PP2_STATUS }}
          output: |
            {"summary":"This indicates whether your project has successfully passed the Process Points 2 Milestone"}
